/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cmccss.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-3")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SELECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("selector", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DS_FIELD_DESC = new org.apache.thrift.protocol.TField("ds", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RANKER_FIELD_DESC = new org.apache.thrift.protocol.TField("ranker", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("reasons", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField DICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("dicts", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String pwd; // optional
  public String selector; // optional
  public String ds; // optional
  public String ranker; // optional
  public String reasons; // optional
  public Map<String,String> options; // optional
  public String dicts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PWD((short)3, "pwd"),
    SELECTOR((short)4, "selector"),
    DS((short)5, "ds"),
    RANKER((short)6, "ranker"),
    REASONS((short)7, "reasons"),
    OPTIONS((short)8, "options"),
    DICTS((short)9, "dicts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // PWD
          return PWD;
        case 4: // SELECTOR
          return SELECTOR;
        case 5: // DS
          return DS;
        case 6: // RANKER
          return RANKER;
        case 7: // REASONS
          return REASONS;
        case 8: // OPTIONS
          return OPTIONS;
        case 9: // DICTS
          return DICTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PWD,_Fields.SELECTOR,_Fields.DS,_Fields.RANKER,_Fields.REASONS,_Fields.OPTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELECTOR, new org.apache.thrift.meta_data.FieldMetaData("selector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DS, new org.apache.thrift.meta_data.FieldMetaData("ds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANKER, new org.apache.thrift.meta_data.FieldMetaData("ranker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASONS, new org.apache.thrift.meta_data.FieldMetaData("reasons", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DICTS, new org.apache.thrift.meta_data.FieldMetaData("dicts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    int id,
    String name,
    String dicts)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.dicts = dicts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPwd()) {
      this.pwd = other.pwd;
    }
    if (other.isSetSelector()) {
      this.selector = other.selector;
    }
    if (other.isSetDs()) {
      this.ds = other.ds;
    }
    if (other.isSetRanker()) {
      this.ranker = other.ranker;
    }
    if (other.isSetReasons()) {
      this.reasons = other.reasons;
    }
    if (other.isSetOptions()) {
      Map<String,String> __this__options = new HashMap<String,String>(other.options);
      this.options = __this__options;
    }
    if (other.isSetDicts()) {
      this.dicts = other.dicts;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.pwd = null;
    this.selector = null;
    this.ds = null;
    this.ranker = null;
    this.reasons = null;
    this.options = null;
    this.dicts = null;
  }

  public int getId() {
    return this.id;
  }

  public User setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public User setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPwd() {
    return this.pwd;
  }

  public User setPwd(String pwd) {
    this.pwd = pwd;
    return this;
  }

  public void unsetPwd() {
    this.pwd = null;
  }

  /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPwd() {
    return this.pwd != null;
  }

  public void setPwdIsSet(boolean value) {
    if (!value) {
      this.pwd = null;
    }
  }

  public String getSelector() {
    return this.selector;
  }

  public User setSelector(String selector) {
    this.selector = selector;
    return this;
  }

  public void unsetSelector() {
    this.selector = null;
  }

  /** Returns true if field selector is set (has been assigned a value) and false otherwise */
  public boolean isSetSelector() {
    return this.selector != null;
  }

  public void setSelectorIsSet(boolean value) {
    if (!value) {
      this.selector = null;
    }
  }

  public String getDs() {
    return this.ds;
  }

  public User setDs(String ds) {
    this.ds = ds;
    return this;
  }

  public void unsetDs() {
    this.ds = null;
  }

  /** Returns true if field ds is set (has been assigned a value) and false otherwise */
  public boolean isSetDs() {
    return this.ds != null;
  }

  public void setDsIsSet(boolean value) {
    if (!value) {
      this.ds = null;
    }
  }

  public String getRanker() {
    return this.ranker;
  }

  public User setRanker(String ranker) {
    this.ranker = ranker;
    return this;
  }

  public void unsetRanker() {
    this.ranker = null;
  }

  /** Returns true if field ranker is set (has been assigned a value) and false otherwise */
  public boolean isSetRanker() {
    return this.ranker != null;
  }

  public void setRankerIsSet(boolean value) {
    if (!value) {
      this.ranker = null;
    }
  }

  public String getReasons() {
    return this.reasons;
  }

  public User setReasons(String reasons) {
    this.reasons = reasons;
    return this;
  }

  public void unsetReasons() {
    this.reasons = null;
  }

  /** Returns true if field reasons is set (has been assigned a value) and false otherwise */
  public boolean isSetReasons() {
    return this.reasons != null;
  }

  public void setReasonsIsSet(boolean value) {
    if (!value) {
      this.reasons = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public void putToOptions(String key, String val) {
    if (this.options == null) {
      this.options = new HashMap<String,String>();
    }
    this.options.put(key, val);
  }

  public Map<String,String> getOptions() {
    return this.options;
  }

  public User setOptions(Map<String,String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public String getDicts() {
    return this.dicts;
  }

  public User setDicts(String dicts) {
    this.dicts = dicts;
    return this;
  }

  public void unsetDicts() {
    this.dicts = null;
  }

  /** Returns true if field dicts is set (has been assigned a value) and false otherwise */
  public boolean isSetDicts() {
    return this.dicts != null;
  }

  public void setDictsIsSet(boolean value) {
    if (!value) {
      this.dicts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PWD:
      if (value == null) {
        unsetPwd();
      } else {
        setPwd((String)value);
      }
      break;

    case SELECTOR:
      if (value == null) {
        unsetSelector();
      } else {
        setSelector((String)value);
      }
      break;

    case DS:
      if (value == null) {
        unsetDs();
      } else {
        setDs((String)value);
      }
      break;

    case RANKER:
      if (value == null) {
        unsetRanker();
      } else {
        setRanker((String)value);
      }
      break;

    case REASONS:
      if (value == null) {
        unsetReasons();
      } else {
        setReasons((String)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((Map<String,String>)value);
      }
      break;

    case DICTS:
      if (value == null) {
        unsetDicts();
      } else {
        setDicts((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case PWD:
      return getPwd();

    case SELECTOR:
      return getSelector();

    case DS:
      return getDs();

    case RANKER:
      return getRanker();

    case REASONS:
      return getReasons();

    case OPTIONS:
      return getOptions();

    case DICTS:
      return getDicts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PWD:
      return isSetPwd();
    case SELECTOR:
      return isSetSelector();
    case DS:
      return isSetDs();
    case RANKER:
      return isSetRanker();
    case REASONS:
      return isSetReasons();
    case OPTIONS:
      return isSetOptions();
    case DICTS:
      return isSetDicts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_pwd = true && this.isSetPwd();
    boolean that_present_pwd = true && that.isSetPwd();
    if (this_present_pwd || that_present_pwd) {
      if (!(this_present_pwd && that_present_pwd))
        return false;
      if (!this.pwd.equals(that.pwd))
        return false;
    }

    boolean this_present_selector = true && this.isSetSelector();
    boolean that_present_selector = true && that.isSetSelector();
    if (this_present_selector || that_present_selector) {
      if (!(this_present_selector && that_present_selector))
        return false;
      if (!this.selector.equals(that.selector))
        return false;
    }

    boolean this_present_ds = true && this.isSetDs();
    boolean that_present_ds = true && that.isSetDs();
    if (this_present_ds || that_present_ds) {
      if (!(this_present_ds && that_present_ds))
        return false;
      if (!this.ds.equals(that.ds))
        return false;
    }

    boolean this_present_ranker = true && this.isSetRanker();
    boolean that_present_ranker = true && that.isSetRanker();
    if (this_present_ranker || that_present_ranker) {
      if (!(this_present_ranker && that_present_ranker))
        return false;
      if (!this.ranker.equals(that.ranker))
        return false;
    }

    boolean this_present_reasons = true && this.isSetReasons();
    boolean that_present_reasons = true && that.isSetReasons();
    if (this_present_reasons || that_present_reasons) {
      if (!(this_present_reasons && that_present_reasons))
        return false;
      if (!this.reasons.equals(that.reasons))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_dicts = true && this.isSetDicts();
    boolean that_present_dicts = true && that.isSetDicts();
    if (this_present_dicts || that_present_dicts) {
      if (!(this_present_dicts && that_present_dicts))
        return false;
      if (!this.dicts.equals(that.dicts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_pwd = true && (isSetPwd());
    list.add(present_pwd);
    if (present_pwd)
      list.add(pwd);

    boolean present_selector = true && (isSetSelector());
    list.add(present_selector);
    if (present_selector)
      list.add(selector);

    boolean present_ds = true && (isSetDs());
    list.add(present_ds);
    if (present_ds)
      list.add(ds);

    boolean present_ranker = true && (isSetRanker());
    list.add(present_ranker);
    if (present_ranker)
      list.add(ranker);

    boolean present_reasons = true && (isSetReasons());
    list.add(present_reasons);
    if (present_reasons)
      list.add(reasons);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_dicts = true && (isSetDicts());
    list.add(present_dicts);
    if (present_dicts)
      list.add(dicts);

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelector()).compareTo(other.isSetSelector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selector, other.selector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDs()).compareTo(other.isSetDs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ds, other.ds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRanker()).compareTo(other.isSetRanker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranker, other.ranker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReasons()).compareTo(other.isSetReasons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasons()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasons, other.reasons);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDicts()).compareTo(other.isSetDicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dicts, other.dicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetPwd()) {
      if (!first) sb.append(", ");
      sb.append("pwd:");
      if (this.pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.pwd);
      }
      first = false;
    }
    if (isSetSelector()) {
      if (!first) sb.append(", ");
      sb.append("selector:");
      if (this.selector == null) {
        sb.append("null");
      } else {
        sb.append(this.selector);
      }
      first = false;
    }
    if (isSetDs()) {
      if (!first) sb.append(", ");
      sb.append("ds:");
      if (this.ds == null) {
        sb.append("null");
      } else {
        sb.append(this.ds);
      }
      first = false;
    }
    if (isSetRanker()) {
      if (!first) sb.append(", ");
      sb.append("ranker:");
      if (this.ranker == null) {
        sb.append("null");
      } else {
        sb.append(this.ranker);
      }
      first = false;
    }
    if (isSetReasons()) {
      if (!first) sb.append(", ");
      sb.append("reasons:");
      if (this.reasons == null) {
        sb.append("null");
      } else {
        sb.append(this.reasons);
      }
      first = false;
    }
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("dicts:");
    if (this.dicts == null) {
      sb.append("null");
    } else {
      sb.append(this.dicts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwd = iprot.readString();
              struct.setPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SELECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.selector = iprot.readString();
              struct.setSelectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ds = iprot.readString();
              struct.setDsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RANKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ranker = iprot.readString();
              struct.setRankerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REASONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasons = iprot.readString();
              struct.setReasonsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.options = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.options.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dicts = iprot.readString();
              struct.setDictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.pwd != null) {
        if (struct.isSetPwd()) {
          oprot.writeFieldBegin(PWD_FIELD_DESC);
          oprot.writeString(struct.pwd);
          oprot.writeFieldEnd();
        }
      }
      if (struct.selector != null) {
        if (struct.isSetSelector()) {
          oprot.writeFieldBegin(SELECTOR_FIELD_DESC);
          oprot.writeString(struct.selector);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ds != null) {
        if (struct.isSetDs()) {
          oprot.writeFieldBegin(DS_FIELD_DESC);
          oprot.writeString(struct.ds);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ranker != null) {
        if (struct.isSetRanker()) {
          oprot.writeFieldBegin(RANKER_FIELD_DESC);
          oprot.writeString(struct.ranker);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reasons != null) {
        if (struct.isSetReasons()) {
          oprot.writeFieldBegin(REASONS_FIELD_DESC);
          oprot.writeString(struct.reasons);
          oprot.writeFieldEnd();
        }
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
            for (Map.Entry<String, String> _iter4 : struct.options.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dicts != null) {
        oprot.writeFieldBegin(DICTS_FIELD_DESC);
        oprot.writeString(struct.dicts);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetPwd()) {
        optionals.set(2);
      }
      if (struct.isSetSelector()) {
        optionals.set(3);
      }
      if (struct.isSetDs()) {
        optionals.set(4);
      }
      if (struct.isSetRanker()) {
        optionals.set(5);
      }
      if (struct.isSetReasons()) {
        optionals.set(6);
      }
      if (struct.isSetOptions()) {
        optionals.set(7);
      }
      if (struct.isSetDicts()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPwd()) {
        oprot.writeString(struct.pwd);
      }
      if (struct.isSetSelector()) {
        oprot.writeString(struct.selector);
      }
      if (struct.isSetDs()) {
        oprot.writeString(struct.ds);
      }
      if (struct.isSetRanker()) {
        oprot.writeString(struct.ranker);
      }
      if (struct.isSetReasons()) {
        oprot.writeString(struct.reasons);
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (Map.Entry<String, String> _iter5 : struct.options.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetDicts()) {
        oprot.writeString(struct.dicts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pwd = iprot.readString();
        struct.setPwdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.selector = iprot.readString();
        struct.setSelectorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ds = iprot.readString();
        struct.setDsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ranker = iprot.readString();
        struct.setRankerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reasons = iprot.readString();
        struct.setReasonsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.options = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.options.put(_key7, _val8);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dicts = iprot.readString();
        struct.setDictsIsSet(true);
      }
    }
  }

}

